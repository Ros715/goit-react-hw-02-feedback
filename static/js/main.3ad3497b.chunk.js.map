{"version":3,"sources":["components/Statistics.js","components/FeedbackOptions.js","components/Notification.js","components/Section.js","App.js","reportWebVitals.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","Math","round","FeedbackOptions","options","onLeaveFeedback","map","opt","type","onClick","handleClick","name","Notification","message","Section","props","onClickGood","ev","setState","state","onClickNeutral","onClickBad","title","this","countTotalFeedback","buttonsOptions","countPositiveFeedbackPercentage","React","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAuBeA,MAvBf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,gCACE,2CACA,uCACQ,+BAAOJ,OAEf,0CACW,+BAAOC,OAElB,sCACO,+BAAOC,OAEd,wCACS,+BAAOC,OAEhB,oDACqB,iCAAOE,KAAKC,MAAMF,GAAlB,cCJZG,MAbf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAEzB,OAFqD,EAAnBC,gBAGhC,8BACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBAAQC,KAAK,SAASC,QAASF,EAAIG,YAAnC,SACGH,EAAII,aCFAC,MAJf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,4BAAIA,KC8DEC,E,kDAzDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAmBRC,YAAc,SAACC,GAEb,EAAKC,SAAS,CAAEtB,KAAM,EAAKuB,MAAMvB,KAAO,KAtBvB,EAwBnBwB,eAAiB,SAACH,GAChB,EAAKC,SAAS,CAAErB,QAAS,EAAKsB,MAAMtB,QAAU,KAzB7B,EA2BnBwB,WAAa,SAACJ,GACZ,EAAKC,SAAS,CAAEpB,IAAK,EAAKqB,MAAMrB,IAAM,KA1BtC,EAAKqB,MAAQ,CACXvB,KAAM,EACNC,QAAS,EACTC,IAAK,GAEP,EAAKwB,MAAQP,EAAMO,MAPF,E,sDAWnB,WACE,OAAOC,KAAKJ,MAAMvB,KAAO2B,KAAKJ,MAAMtB,QAAU0B,KAAKJ,MAAMrB,M,6CAG3D,WACE,IAAMC,EAAQwB,KAAKC,qBACnB,OAAOzB,EAAQ,EAAK,IAAMwB,KAAKJ,MAAMvB,KAAQG,EAAQ,I,oBAcvD,WACE,IAAM0B,EAAiB,CACrB,CAAEd,KAAM,OAAQD,YAAaa,KAAKP,aAClC,CAAEL,KAAM,UAAWD,YAAaa,KAAKH,gBACrC,CAAET,KAAM,MAAOD,YAAaa,KAAKF,aAEnC,OACE,gCACE,4BAAIE,KAAKD,QACT,cAAC,EAAD,CAAiBlB,QAASqB,IACK,IAA9BF,KAAKC,qBACJ,cAAC,EAAD,CAAcX,QAAQ,sBAEtB,cAAC,EAAD,CACEjB,KAAM2B,KAAKJ,MAAMvB,KACjBC,QAAS0B,KAAKJ,MAAMtB,QACpBC,IAAKyB,KAAKJ,MAAMrB,IAChBC,MAAOwB,KAAKC,qBACZxB,mBAAoBuB,KAAKG,2C,GAlDfC,IAAMC,W,MCgCbC,MAlCf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,CAASR,MAAM,6BCMNS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3ad3497b.chunk.js","sourcesContent":["function Statistics({ good, neutral, bad, total, positivePercentage }) {\r\n  return (\r\n    <div>\r\n      <p>Statistics</p>\r\n      <p>\r\n        Good: <span>{good}</span>\r\n      </p>\r\n      <p>\r\n        Neutral: <span>{neutral}</span>\r\n      </p>\r\n      <p>\r\n        Bad: <span>{bad}</span>\r\n      </p>\r\n      <p>\r\n        Total: <span>{total}</span>\r\n      </p>\r\n      <p>\r\n        Positive feedback: <span>{Math.round(positivePercentage)}%</span>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Statistics;\r\n","function FeedbackOptions({ options, onLeaveFeedback }) {\r\n  //console.log(options);\r\n  return (\r\n    <div>\r\n      {options.map((opt) => (\r\n        <button type=\"button\" onClick={opt.handleClick}>\r\n          {opt.name}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FeedbackOptions;\r\n","function Notification({ message }) {\r\n  return <p>{message}</p>;\r\n}\r\n\r\nexport default Notification;\r\n","import React from \"react\";\r\nimport Statistics from \"./Statistics.js\";\r\nimport FeedbackOptions from \"./FeedbackOptions.js\";\r\nimport Notification from \"./Notification.js\";\r\n\r\nclass Section extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      good: 0,\r\n      neutral: 0,\r\n      bad: 0,\r\n    };\r\n    this.title = props.title;\r\n    //console.log(props);\r\n  }\r\n\r\n  countTotalFeedback() {\r\n    return this.state.good + this.state.neutral + this.state.bad;\r\n  }\r\n\r\n  countPositiveFeedbackPercentage() {\r\n    const total = this.countTotalFeedback();\r\n    return total > 0 ? (100 * this.state.good) / total : 0;\r\n  }\r\n\r\n  onClickGood = (ev) => {\r\n    //console.log(\"click\");\r\n    this.setState({ good: this.state.good + 1 });\r\n  };\r\n  onClickNeutral = (ev) => {\r\n    this.setState({ neutral: this.state.neutral + 1 });\r\n  };\r\n  onClickBad = (ev) => {\r\n    this.setState({ bad: this.state.bad + 1 });\r\n  };\r\n\r\n  render() {\r\n    const buttonsOptions = [\r\n      { name: \"Good\", handleClick: this.onClickGood },\r\n      { name: \"Neutral\", handleClick: this.onClickNeutral },\r\n      { name: \"Bad\", handleClick: this.onClickBad },\r\n    ];\r\n    return (\r\n      <div>\r\n        <p>{this.title}</p>\r\n        <FeedbackOptions options={buttonsOptions} />\r\n        {this.countTotalFeedback() === 0 ? (\r\n          <Notification message=\"No feedback given\" />\r\n        ) : (\r\n          <Statistics\r\n            good={this.state.good}\r\n            neutral={this.state.neutral}\r\n            bad={this.state.bad}\r\n            total={this.countTotalFeedback()}\r\n            positivePercentage={this.countPositiveFeedbackPercentage()}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Section;\r\n","import Section from './components/Section.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Section title='Please leave feedback' />\n    </div>\n  );\n}\n\n/*\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n*/\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}