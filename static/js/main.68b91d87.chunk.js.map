{"version":3,"sources":["components/Statistics.module.css","components/Section.module.css","components/Notification.module.css","components/Statistics.js","components/FeedbackOptions.js","components/Notification.js","components/Section.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Statistics","good","neutral","bad","total","positivePercentage","className","styles","statisticsTitle","statistics","Math","round","FeedbackOptions","options","onLeaveFeedback","map","opt","type","onClick","handleClick","name","Notification","message","notification","Section","props","onClickGood","ev","setState","state","onClickNeutral","onClickBad","this","countTotalFeedback","buttonsOptions","title","countPositiveFeedbackPercentage","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68b91d87.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"statisticsTitle\":\"Statistics_statisticsTitle__1UFaY\",\"statistics\":\"Statistics_statistics__2PI8M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__d0rty\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__1l9yd\"};","import styles from \"./Statistics.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\r\n  return (\r\n    <div>\r\n      <p className={styles.statisticsTitle}>Statistics</p>\r\n      <p className={styles.statistics}>\r\n        Good: <span>{good}</span>\r\n      </p>\r\n      <p className={styles.statistics}>\r\n        Neutral: <span>{neutral}</span>\r\n      </p>\r\n      <p className={styles.statistics}>\r\n        Bad: <span>{bad}</span>\r\n      </p>\r\n      <p className={styles.statistics}>\r\n        Total: <span>{total}</span>\r\n      </p>\r\n      <p className={styles.statistics}>\r\n        Positive feedback: <span>{Math.round(positivePercentage)}%</span>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from \"prop-types\";\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  //console.log(options);\r\n  return (\r\n    <div>\r\n      {options.map((opt) => (\r\n        <button type=\"button\" onClick={opt.handleClick}>\r\n          {opt.name}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      handleClick: PropTypes.func.isRequired,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import styles from \"./Notification.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Notification({ message }) {\r\n  return <p className={styles.notification}>{message}</p>;\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Section.module.css\";\r\nimport Statistics from \"./Statistics.js\";\r\nimport FeedbackOptions from \"./FeedbackOptions.js\";\r\nimport Notification from \"./Notification.js\";\r\n\r\nclass Section extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      good: 0,\r\n      neutral: 0,\r\n      bad: 0,\r\n    };\r\n    //console.log(props);\r\n  }\r\n\r\n  countTotalFeedback() {\r\n    return this.state.good + this.state.neutral + this.state.bad;\r\n  }\r\n\r\n  countPositiveFeedbackPercentage() {\r\n    const total = this.countTotalFeedback();\r\n    return total > 0 ? (100 * this.state.good) / total : 0;\r\n  }\r\n\r\n  onClickGood = (ev) => {\r\n    //console.log(\"click\");\r\n    this.setState({ good: this.state.good + 1 });\r\n  };\r\n  onClickNeutral = (ev) => {\r\n    this.setState({ neutral: this.state.neutral + 1 });\r\n  };\r\n  onClickBad = (ev) => {\r\n    this.setState({ bad: this.state.bad + 1 });\r\n  };\r\n\r\n  render() {\r\n    const buttonsOptions = [\r\n      { name: \"Good\", handleClick: this.onClickGood },\r\n      { name: \"Neutral\", handleClick: this.onClickNeutral },\r\n      { name: \"Bad\", handleClick: this.onClickBad },\r\n    ];\r\n    return (\r\n      <div>\r\n        <p className={styles.title}>{this.props.title}</p>\r\n        <FeedbackOptions options={buttonsOptions} />\r\n        {this.countTotalFeedback() === 0 ? (\r\n          <Notification message=\"No feedback given\" />\r\n        ) : (\r\n          <Statistics\r\n            good={this.state.good}\r\n            neutral={this.state.neutral}\r\n            bad={this.state.bad}\r\n            total={this.countTotalFeedback()}\r\n            positivePercentage={this.countPositiveFeedbackPercentage()}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import Section from './components/Section.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Section title='Please leave feedback' />\n    </div>\n  );\n}\n\n/*\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n*/\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}